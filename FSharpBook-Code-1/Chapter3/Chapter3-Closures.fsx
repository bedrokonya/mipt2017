// =============================================================
// Дмитрий Сошников: Функциональное программирования на языке F#
//                               http://www.soshnikov.com/fsharp
// -------------------------------------------------------------
// Глава 3: Приёмы функционального программирования - замыкания
// =============================================================

// Определяем функцию выделения чисел, делящихся на 3
let filt = List.filter (fun x -> x%3=0) in
  [1..100] |> filt;;

// Тоже самое, но число 3 задаётся в виде переменной с внешней областью видимости
// Значение n=3 "захвачено" внутри определённой функции filt
// На самом деле filt является замыканием (функция + контекст)
let n = 3 in
  let filt = List.filter (fun x -> x%n=0) in
    [1..100] |> filt;;

// Тоже самое, но более изящно
// Функция divisible возвращает по заданному n замыкание, которое "захватывает" внутрь себя значение n
let divisible n = List.filter (fun x -> x%n=0)
let filt = divisible 3 in [1..100] |> filt

// Статическое связывание. Значение переменной x захватывается в контексте adder и не меняется,
// когда появляется другая переменная с именем x, перекрывающая исходную
let x = 4;;
let adder y = x+y;;
adder 1;;
let x = 3;;
adder 1;;
adder;;

// F# позволяет также определять изменяемые (мутирующие, mutable) переменные
// К ним применяется динамическое связывание
let mutable x = 4;;
let adder y = x+y;;
adder 1;;
x <- 3;;
adder 1;;
adder;;
