// Implementation file for parser generated by fsyacc
module Pars
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open Microsoft.FSharp.Text.Lexing
open Microsoft.FSharp.Text.Parsing.ParseHelpers
# 10 "pars.fsy"

// This prelude is F# code that is available throughout this file. In this
// case we just open a module to reveal some datatype definitions.
open Ast


# 13 "pars.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | LET
  | LETREC
  | FUN
  | IN
  | LPAREN
  | RPAREN
  | END
  | BEGIN
  | IF
  | THEN
  | ELSE
  | SEMI
  | EOF
  | PLUS
  | MINUS
  | TIMES
  | DIV
  | EQ
  | ARROW
  | DOT
  | LESS
  | MORE
  | INT of (System.Int32)
  | ID of (string)
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_LET
    | TOKEN_LETREC
    | TOKEN_FUN
    | TOKEN_IN
    | TOKEN_LPAREN
    | TOKEN_RPAREN
    | TOKEN_END
    | TOKEN_BEGIN
    | TOKEN_IF
    | TOKEN_THEN
    | TOKEN_ELSE
    | TOKEN_SEMI
    | TOKEN_EOF
    | TOKEN_PLUS
    | TOKEN_MINUS
    | TOKEN_TIMES
    | TOKEN_DIV
    | TOKEN_EQ
    | TOKEN_ARROW
    | TOKEN_DOT
    | TOKEN_LESS
    | TOKEN_MORE
    | TOKEN_INT
    | TOKEN_ID
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startstart
    | NONTERM_start
    | NONTERM_Prog
    | NONTERM_SimpleExpr
    | NONTERM_Expr
    | NONTERM_AppList

// This function maps tokens to integers indexes
let tagOfToken (t:token) = 
  match t with
  | LET  -> 0 
  | LETREC  -> 1 
  | FUN  -> 2 
  | IN  -> 3 
  | LPAREN  -> 4 
  | RPAREN  -> 5 
  | END  -> 6 
  | BEGIN  -> 7 
  | IF  -> 8 
  | THEN  -> 9 
  | ELSE  -> 10 
  | SEMI  -> 11 
  | EOF  -> 12 
  | PLUS  -> 13 
  | MINUS  -> 14 
  | TIMES  -> 15 
  | DIV  -> 16 
  | EQ  -> 17 
  | ARROW  -> 18 
  | DOT  -> 19 
  | LESS  -> 20 
  | MORE  -> 21 
  | INT _ -> 22 
  | ID _ -> 23 

// This function maps integers indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_LET 
  | 1 -> TOKEN_LETREC 
  | 2 -> TOKEN_FUN 
  | 3 -> TOKEN_IN 
  | 4 -> TOKEN_LPAREN 
  | 5 -> TOKEN_RPAREN 
  | 6 -> TOKEN_END 
  | 7 -> TOKEN_BEGIN 
  | 8 -> TOKEN_IF 
  | 9 -> TOKEN_THEN 
  | 10 -> TOKEN_ELSE 
  | 11 -> TOKEN_SEMI 
  | 12 -> TOKEN_EOF 
  | 13 -> TOKEN_PLUS 
  | 14 -> TOKEN_MINUS 
  | 15 -> TOKEN_TIMES 
  | 16 -> TOKEN_DIV 
  | 17 -> TOKEN_EQ 
  | 18 -> TOKEN_ARROW 
  | 19 -> TOKEN_DOT 
  | 20 -> TOKEN_LESS 
  | 21 -> TOKEN_MORE 
  | 22 -> TOKEN_INT 
  | 23 -> TOKEN_ID 
  | 26 -> TOKEN_end_of_input
  | 24 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startstart 
    | 1 -> NONTERM_start 
    | 2 -> NONTERM_Prog 
    | 3 -> NONTERM_SimpleExpr 
    | 4 -> NONTERM_SimpleExpr 
    | 5 -> NONTERM_SimpleExpr 
    | 6 -> NONTERM_SimpleExpr 
    | 7 -> NONTERM_SimpleExpr 
    | 8 -> NONTERM_SimpleExpr 
    | 9 -> NONTERM_SimpleExpr 
    | 10 -> NONTERM_SimpleExpr 
    | 11 -> NONTERM_SimpleExpr 
    | 12 -> NONTERM_SimpleExpr 
    | 13 -> NONTERM_SimpleExpr 
    | 14 -> NONTERM_SimpleExpr 
    | 15 -> NONTERM_SimpleExpr 
    | 16 -> NONTERM_Expr 
    | 17 -> NONTERM_AppList 
    | 18 -> NONTERM_AppList 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 26 
let _fsyacc_tagOfErrorTerminal = 24

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | LET  -> "LET" 
  | LETREC  -> "LETREC" 
  | FUN  -> "FUN" 
  | IN  -> "IN" 
  | LPAREN  -> "LPAREN" 
  | RPAREN  -> "RPAREN" 
  | END  -> "END" 
  | BEGIN  -> "BEGIN" 
  | IF  -> "IF" 
  | THEN  -> "THEN" 
  | ELSE  -> "ELSE" 
  | SEMI  -> "SEMI" 
  | EOF  -> "EOF" 
  | PLUS  -> "PLUS" 
  | MINUS  -> "MINUS" 
  | TIMES  -> "TIMES" 
  | DIV  -> "DIV" 
  | EQ  -> "EQ" 
  | ARROW  -> "ARROW" 
  | DOT  -> "DOT" 
  | LESS  -> "LESS" 
  | MORE  -> "MORE" 
  | INT _ -> "INT" 
  | ID _ -> "ID" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | LET  -> (null : System.Object) 
  | LETREC  -> (null : System.Object) 
  | FUN  -> (null : System.Object) 
  | IN  -> (null : System.Object) 
  | LPAREN  -> (null : System.Object) 
  | RPAREN  -> (null : System.Object) 
  | END  -> (null : System.Object) 
  | BEGIN  -> (null : System.Object) 
  | IF  -> (null : System.Object) 
  | THEN  -> (null : System.Object) 
  | ELSE  -> (null : System.Object) 
  | SEMI  -> (null : System.Object) 
  | EOF  -> (null : System.Object) 
  | PLUS  -> (null : System.Object) 
  | MINUS  -> (null : System.Object) 
  | TIMES  -> (null : System.Object) 
  | DIV  -> (null : System.Object) 
  | EQ  -> (null : System.Object) 
  | ARROW  -> (null : System.Object) 
  | DOT  -> (null : System.Object) 
  | LESS  -> (null : System.Object) 
  | MORE  -> (null : System.Object) 
  | INT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | ID _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
let _fsyacc_gotos = [| 0us; 65535us; 1us; 65535us; 0us; 1us; 1us; 65535us; 0us; 2us; 11us; 65535us; 0us; 38us; 14us; 38us; 16us; 38us; 19us; 38us; 21us; 38us; 23us; 38us; 27us; 38us; 29us; 38us; 33us; 38us; 35us; 38us; 39us; 40us; 10us; 65535us; 0us; 3us; 14us; 15us; 16us; 17us; 19us; 20us; 21us; 22us; 23us; 24us; 27us; 28us; 29us; 30us; 33us; 34us; 35us; 36us; 10us; 65535us; 0us; 37us; 14us; 37us; 16us; 37us; 19us; 37us; 21us; 37us; 23us; 37us; 27us; 37us; 29us; 37us; 33us; 37us; 35us; 37us; |]
let _fsyacc_sparseGotoTableRowOffsets = [|0us; 1us; 3us; 5us; 17us; 28us; |]
let _fsyacc_stateToProdIdxsTableElements = [| 1us; 0us; 1us; 0us; 1us; 1us; 1us; 2us; 1us; 3us; 1us; 4us; 1us; 5us; 1us; 6us; 1us; 7us; 1us; 8us; 1us; 9us; 1us; 10us; 1us; 11us; 1us; 11us; 1us; 11us; 1us; 11us; 1us; 12us; 1us; 12us; 1us; 12us; 1us; 13us; 1us; 13us; 1us; 13us; 1us; 13us; 1us; 13us; 1us; 13us; 1us; 14us; 1us; 14us; 1us; 14us; 1us; 14us; 1us; 14us; 1us; 14us; 1us; 15us; 1us; 15us; 1us; 15us; 1us; 15us; 1us; 15us; 1us; 15us; 2us; 16us; 18us; 1us; 17us; 1us; 18us; 1us; 18us; |]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us; 2us; 4us; 6us; 8us; 10us; 12us; 14us; 16us; 18us; 20us; 22us; 24us; 26us; 28us; 30us; 32us; 34us; 36us; 38us; 40us; 42us; 44us; 46us; 48us; 50us; 52us; 54us; 56us; 58us; 60us; 62us; 64us; 66us; 68us; 70us; 72us; 74us; 77us; 79us; 81us; |]
let _fsyacc_action_rows = 41
let _fsyacc_actionTableElements = [|13us; 32768us; 0us; 25us; 1us; 31us; 2us; 12us; 4us; 16us; 8us; 19us; 13us; 6us; 14us; 7us; 15us; 8us; 16us; 11us; 20us; 9us; 21us; 10us; 22us; 5us; 23us; 4us; 0us; 49152us; 0us; 16385us; 0us; 16386us; 0us; 16387us; 0us; 16388us; 0us; 16389us; 0us; 16390us; 0us; 16391us; 0us; 16392us; 0us; 16393us; 0us; 16394us; 1us; 32768us; 23us; 13us; 1us; 32768us; 18us; 14us; 13us; 32768us; 0us; 25us; 1us; 31us; 2us; 12us; 4us; 16us; 8us; 19us; 13us; 6us; 14us; 7us; 15us; 8us; 16us; 11us; 20us; 9us; 21us; 10us; 22us; 5us; 23us; 4us; 0us; 16395us; 13us; 32768us; 0us; 25us; 1us; 31us; 2us; 12us; 4us; 16us; 8us; 19us; 13us; 6us; 14us; 7us; 15us; 8us; 16us; 11us; 20us; 9us; 21us; 10us; 22us; 5us; 23us; 4us; 1us; 32768us; 5us; 18us; 0us; 16396us; 13us; 32768us; 0us; 25us; 1us; 31us; 2us; 12us; 4us; 16us; 8us; 19us; 13us; 6us; 14us; 7us; 15us; 8us; 16us; 11us; 20us; 9us; 21us; 10us; 22us; 5us; 23us; 4us; 1us; 32768us; 9us; 21us; 13us; 32768us; 0us; 25us; 1us; 31us; 2us; 12us; 4us; 16us; 8us; 19us; 13us; 6us; 14us; 7us; 15us; 8us; 16us; 11us; 20us; 9us; 21us; 10us; 22us; 5us; 23us; 4us; 1us; 32768us; 10us; 23us; 13us; 32768us; 0us; 25us; 1us; 31us; 2us; 12us; 4us; 16us; 8us; 19us; 13us; 6us; 14us; 7us; 15us; 8us; 16us; 11us; 20us; 9us; 21us; 10us; 22us; 5us; 23us; 4us; 0us; 16397us; 1us; 32768us; 23us; 26us; 1us; 32768us; 17us; 27us; 13us; 32768us; 0us; 25us; 1us; 31us; 2us; 12us; 4us; 16us; 8us; 19us; 13us; 6us; 14us; 7us; 15us; 8us; 16us; 11us; 20us; 9us; 21us; 10us; 22us; 5us; 23us; 4us; 1us; 32768us; 3us; 29us; 13us; 32768us; 0us; 25us; 1us; 31us; 2us; 12us; 4us; 16us; 8us; 19us; 13us; 6us; 14us; 7us; 15us; 8us; 16us; 11us; 20us; 9us; 21us; 10us; 22us; 5us; 23us; 4us; 0us; 16398us; 1us; 32768us; 23us; 32us; 1us; 32768us; 17us; 33us; 13us; 32768us; 0us; 25us; 1us; 31us; 2us; 12us; 4us; 16us; 8us; 19us; 13us; 6us; 14us; 7us; 15us; 8us; 16us; 11us; 20us; 9us; 21us; 10us; 22us; 5us; 23us; 4us; 1us; 32768us; 3us; 35us; 13us; 32768us; 0us; 25us; 1us; 31us; 2us; 12us; 4us; 16us; 8us; 19us; 13us; 6us; 14us; 7us; 15us; 8us; 16us; 11us; 20us; 9us; 21us; 10us; 22us; 5us; 23us; 4us; 0us; 16399us; 1us; 16400us; 19us; 39us; 0us; 16401us; 13us; 32768us; 0us; 25us; 1us; 31us; 2us; 12us; 4us; 16us; 8us; 19us; 13us; 6us; 14us; 7us; 15us; 8us; 16us; 11us; 20us; 9us; 21us; 10us; 22us; 5us; 23us; 4us; 0us; 16402us; |]
let _fsyacc_actionTableRowOffsets = [|0us; 14us; 15us; 16us; 17us; 18us; 19us; 20us; 21us; 22us; 23us; 24us; 25us; 27us; 29us; 43us; 44us; 58us; 60us; 61us; 75us; 77us; 91us; 93us; 107us; 108us; 110us; 112us; 126us; 128us; 142us; 143us; 145us; 147us; 161us; 163us; 177us; 178us; 180us; 181us; 195us; |]
let _fsyacc_reductionSymbolCounts = [|1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 4us; 3us; 6us; 6us; 6us; 1us; 1us; 3us; |]
let _fsyacc_productionToNonTerminalTable = [|0us; 1us; 2us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 4us; 5us; 5us; |]
let _fsyacc_immediateActions = [|65535us; 49152us; 16385us; 16386us; 16387us; 16388us; 16389us; 16390us; 16391us; 16392us; 16393us; 16394us; 65535us; 65535us; 65535us; 16395us; 65535us; 65535us; 16396us; 65535us; 65535us; 65535us; 65535us; 65535us; 16397us; 65535us; 65535us; 65535us; 65535us; 65535us; 16398us; 65535us; 65535us; 65535us; 65535us; 65535us; 16399us; 65535us; 16401us; 65535us; 16402us; |]
let _fsyacc_reductions ()  =    [| 
# 229 "pars.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data :  Ast.prog )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (Microsoft.FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : '_startstart));
# 238 "pars.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Prog)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 36 "pars.fsy"
                                   _1 
                   )
# 36 "pars.fsy"
                 :  Ast.prog ));
# 249 "pars.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 38 "pars.fsy"
                                  _1 
                   )
# 38 "pars.fsy"
                 : 'Prog));
# 260 "pars.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 41 "pars.fsy"
                                                     Var(_1) 
                   )
# 41 "pars.fsy"
                 : 'SimpleExpr));
# 271 "pars.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : System.Int32)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 42 "pars.fsy"
                                                     Int(_1)  
                   )
# 42 "pars.fsy"
                 : 'SimpleExpr));
# 282 "pars.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 43 "pars.fsy"
                                  PFunc("+")  
                   )
# 43 "pars.fsy"
                 : 'SimpleExpr));
# 292 "pars.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 44 "pars.fsy"
                                   PFunc("-")  
                   )
# 44 "pars.fsy"
                 : 'SimpleExpr));
# 302 "pars.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 45 "pars.fsy"
                                   PFunc("*")  
                   )
# 45 "pars.fsy"
                 : 'SimpleExpr));
# 312 "pars.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 46 "pars.fsy"
                                  PFunc("<") 
                   )
# 46 "pars.fsy"
                 : 'SimpleExpr));
# 322 "pars.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 47 "pars.fsy"
                                  PFunc(">") 
                   )
# 47 "pars.fsy"
                 : 'SimpleExpr));
# 332 "pars.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 48 "pars.fsy"
                                 PFunc("/")  
                   )
# 48 "pars.fsy"
                 : 'SimpleExpr));
# 342 "pars.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 49 "pars.fsy"
                                               Lam(_2,_4) 
                   )
# 49 "pars.fsy"
                 : 'SimpleExpr));
# 354 "pars.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 50 "pars.fsy"
                                                _2 
                   )
# 50 "pars.fsy"
                 : 'SimpleExpr));
# 365 "pars.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 51 "pars.fsy"
                                                         Cond(_2,_4,_6) 
                   )
# 51 "pars.fsy"
                 : 'SimpleExpr));
# 378 "pars.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 52 "pars.fsy"
                                                    Let(_2,_4,_6) 
                   )
# 52 "pars.fsy"
                 : 'SimpleExpr));
# 391 "pars.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 53 "pars.fsy"
                                                       LetRec(_2,_4,_6) 
                   )
# 53 "pars.fsy"
                 : 'SimpleExpr));
# 404 "pars.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'AppList)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 55 "pars.fsy"
                                     _1 
                   )
# 55 "pars.fsy"
                 : 'Expr));
# 415 "pars.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'SimpleExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 58 "pars.fsy"
                                        _1 
                   )
# 58 "pars.fsy"
                 : 'AppList));
# 426 "pars.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'AppList)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'SimpleExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 59 "pars.fsy"
                                                    App(_1,_3) 
                   )
# 59 "pars.fsy"
                 : 'AppList));
|]
# 439 "pars.fs"
let tables () : Microsoft.FSharp.Text.Parsing.Tables<_> = 
  { reductions= _fsyacc_reductions ();
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:Microsoft.FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 27;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = (tables ()).Interpret(lexer, lexbuf, startState)
let start lexer lexbuf :  Ast.prog  =
    Microsoft.FSharp.Core.Operators.unbox ((tables ()).Interpret(lexer, lexbuf, 0))
