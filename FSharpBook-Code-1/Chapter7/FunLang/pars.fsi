// Signature file for parser generated by fsyacc
module Pars
type token = 
  | LET
  | LETREC
  | FUN
  | IN
  | LPAREN
  | RPAREN
  | END
  | BEGIN
  | IF
  | THEN
  | ELSE
  | SEMI
  | EOF
  | PLUS
  | MINUS
  | TIMES
  | DIV
  | EQ
  | ARROW
  | DOT
  | LESS
  | MORE
  | INT of (System.Int32)
  | ID of (string)
type tokenId = 
    | TOKEN_LET
    | TOKEN_LETREC
    | TOKEN_FUN
    | TOKEN_IN
    | TOKEN_LPAREN
    | TOKEN_RPAREN
    | TOKEN_END
    | TOKEN_BEGIN
    | TOKEN_IF
    | TOKEN_THEN
    | TOKEN_ELSE
    | TOKEN_SEMI
    | TOKEN_EOF
    | TOKEN_PLUS
    | TOKEN_MINUS
    | TOKEN_TIMES
    | TOKEN_DIV
    | TOKEN_EQ
    | TOKEN_ARROW
    | TOKEN_DOT
    | TOKEN_LESS
    | TOKEN_MORE
    | TOKEN_INT
    | TOKEN_ID
    | TOKEN_end_of_input
    | TOKEN_error
type nonTerminalId = 
    | NONTERM__startstart
    | NONTERM_start
    | NONTERM_Prog
    | NONTERM_SimpleExpr
    | NONTERM_Expr
    | NONTERM_AppList
/// This function maps integers indexes to symbolic token ids
val tagOfToken: token -> int

/// This function maps integers indexes to symbolic token ids
val tokenTagToTokenId: int -> tokenId

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
val prodIdxToNonTerminal: int -> nonTerminalId

/// This function gets the name of a token as a string
val token_to_string: token -> string
val start : (Microsoft.FSharp.Text.Lexing.LexBuffer<'cty> -> token) -> Microsoft.FSharp.Text.Lexing.LexBuffer<'cty> -> ( Ast.prog ) 
